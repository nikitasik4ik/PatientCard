// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientCard.Data;

#nullable disable

namespace PatientCard.Migrations
{
    [DbContext(typeof(PatientCardContext))]
    [Migration("20230324230115_OrganizationD")]
    partial class OrganizationD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PatientCard.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PatientCard.Models.Analyze", b =>
                {
                    b.Property<int>("IdAnalyzes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnalyzes"));

                    b.Property<DateTime?>("DateAnalyzes")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdAnalyzes");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("IdService");

                    b.HasIndex("UserId");

                    b.ToTable("Analyze");
                });

            modelBuilder.Entity("PatientCard.Models.Anthropometry", b =>
                {
                    b.Property<int>("AnthropometryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnthropometryId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnthropometryId");

                    b.HasIndex("UserId");

                    b.ToTable("Anthropometry");
                });

            modelBuilder.Entity("PatientCard.Models.Departament", b =>
                {
                    b.Property<int>("IdDepartament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartament"));

                    b.Property<string>("AdressDepartament")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameDepartament")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeDepartament")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDepartament");

                    b.ToTable("Departament");
                });

            modelBuilder.Entity("PatientCard.Models.DisabilitySheet", b =>
                {
                    b.Property<int>("IdDisabilitySheet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDisabilitySheet"));

                    b.Property<DateTime?>("DateOfSinging")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganozatiom")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdDisabilitySheet");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("UserId");

                    b.ToTable("DisabilitySheet");
                });

            modelBuilder.Entity("PatientCard.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoctor"));

                    b.Property<string>("FullNameDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdSignatureDoctor")
                        .HasColumnType("int")
                        .HasColumnName("IdSignatureDoctor");

                    b.HasKey("IdDoctor");

                    b.HasIndex("IdSignatureDoctor");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("PatientCard.Models.Financing", b =>
                {
                    b.Property<int>("IdFinancing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFinancing"));

                    b.Property<string>("FinancingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFinancing");

                    b.ToTable("Financing");
                });

            modelBuilder.Entity("PatientCard.Models.Glucose", b =>
                {
                    b.Property<int>("GlucoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlucoseId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlucoseId");

                    b.HasIndex("UserId");

                    b.ToTable("Glucose");
                });

            modelBuilder.Entity("PatientCard.Models.Hospital", b =>
                {
                    b.Property<int>("IdHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHospital"));

                    b.Property<DateTime?>("DateDischarge")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceipt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdOperation")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganozatiom")
                        .HasColumnType("int");

                    b.Property<int?>("IdReception")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionHospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Ward")
                        .HasColumnType("int");

                    b.HasKey("IdHospital");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("IdReception");

                    b.HasIndex("InspectionHospitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionHospital", b =>
                {
                    b.Property<int>("IdInspectionHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInspectionHospital"));

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("Inspection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InspectionPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdInspectionHospital");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdService");

                    b.HasIndex("UserId");

                    b.ToTable("InspectionHospital");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionPolyclinic", b =>
                {
                    b.Property<int>("IdInspectionPoliclinic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInspectionPoliclinic"));

                    b.Property<string>("AnamnesisDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdInspectionPoliclinic");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdService");

                    b.HasIndex("UserId");

                    b.ToTable("InspectionPoliclinics");
                });

            modelBuilder.Entity("PatientCard.Models.MedicalCar", b =>
                {
                    b.Property<int>("IdMedicalCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicalCar"));

                    b.Property<DateTime?>("DateMedicalCar")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<string>("IssueExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdMedicalCar");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalCar");
                });

            modelBuilder.Entity("PatientCard.Models.Operation", b =>
                {
                    b.Property<int>("IdOperation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOperation"));

                    b.Property<DateTime?>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("DurationOperation")
                        .HasColumnType("time");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdFinancing")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("ProtocolOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdOperation");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdFinancing");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("IdService");

                    b.HasIndex("UserId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("PatientCard.Models.Organization", b =>
                {
                    b.Property<int>("IdOrganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrganization"));

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOrganization");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("PatientCard.Models.Oxygen", b =>
                {
                    b.Property<int>("OxygenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OxygenId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OxygenId");

                    b.HasIndex("UserId");

                    b.ToTable("Oxygen");
                });

            modelBuilder.Entity("PatientCard.Models.Polyclinic", b =>
                {
                    b.Property<int>("IdPolyclinic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPolyclinic"));

                    b.Property<string>("Complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAnalyze")
                        .HasColumnType("int");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdFinancing")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("IdStydy")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionId")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionPolyclinicIdInspectionPoliclinic")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPolyclinic");

                    b.HasIndex("IdAnalyze");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdFinancing");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("IdStydy");

                    b.HasIndex("InspectionPolyclinicIdInspectionPoliclinic");

                    b.HasIndex("UserId");

                    b.ToTable("Polyclinic");
                });

            modelBuilder.Entity("PatientCard.Models.Pressure", b =>
                {
                    b.Property<int>("PressureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PressureId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PressureId");

                    b.HasIndex("UserId");

                    b.ToTable("Pressure");
                });

            modelBuilder.Entity("PatientCard.Models.Reception", b =>
                {
                    b.Property<int>("IdReception")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReception"));

                    b.Property<string>("AnamnesisDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnamnesisLife")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdAnalyze")
                        .HasColumnType("int");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdService")
                        .HasColumnType("int");

                    b.Property<int?>("IdStydy")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdReception");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IdAnalyze");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdService");

                    b.HasIndex("IdStydy");

                    b.ToTable("Reception");
                });

            modelBuilder.Entity("PatientCard.Models.Recipe", b =>
                {
                    b.Property<int>("IdRecipe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecipe"));

                    b.Property<string>("CodeRecipe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRecipe")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdSignatureDoctor")
                        .HasColumnType("int");

                    b.Property<string>("RecipeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdRecipe");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdSignatureDoctor");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("PatientCard.Models.Service", b =>
                {
                    b.Property<int>("IdService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdService"));

                    b.Property<string>("CodeService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameService")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdService");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("PatientCard.Models.SignatureDoctor", b =>
                {
                    b.Property<int>("IdSignatureDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSignatureDoctor"));

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidWith")
                        .HasColumnType("datetime2");

                    b.HasKey("IdSignatureDoctor");

                    b.HasIndex("IdDoctor")
                        .IsUnique()
                        .HasFilter("[IdDoctor] IS NOT NULL");

                    b.ToTable("SignatureDoctor");
                });

            modelBuilder.Entity("PatientCard.Models.Stydy", b =>
                {
                    b.Property<int>("IdStydy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStydy"));

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Done")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDepartament")
                        .HasColumnType("int");

                    b.Property<int?>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int?>("IdOrganization")
                        .HasColumnType("int");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdStydy");

                    b.HasIndex("IdDepartament");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdOrganization");

                    b.HasIndex("UserId");

                    b.ToTable("Stydy");
                });

            modelBuilder.Entity("PatientCard.Models.Temperature", b =>
                {
                    b.Property<int>("TemperatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemperatureId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemperatureId");

                    b.HasIndex("UserId");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientCard.Models.Analyze", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Analyze")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("Analyzes")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("Analyzes")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Models.Service", "Service")
                        .WithMany("Analyzes")
                        .HasForeignKey("IdService");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Analyze")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Organization");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Anthropometry", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Anthropometry")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.DisabilitySheet", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("DisabilitySheet")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("DisabilitySheet")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("DisabilitySheet")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("DisabilitySheet")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Doctor", b =>
                {
                    b.HasOne("PatientCard.Models.SignatureDoctor", "SignatureDoctor")
                        .WithMany()
                        .HasForeignKey("IdSignatureDoctor");

                    b.Navigation("SignatureDoctor");
                });

            modelBuilder.Entity("PatientCard.Models.Glucose", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Glucose")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Hospital", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Hospital")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Operation", "Operation")
                        .WithMany("Hospital")
                        .HasForeignKey("IdOperation");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("Hospitals")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Models.Reception", "Reception")
                        .WithMany("Hospital")
                        .HasForeignKey("IdReception");

                    b.HasOne("PatientCard.Models.InspectionHospital", "InspectionHospital")
                        .WithMany("Hospital")
                        .HasForeignKey("InspectionHospitalId");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Hospital")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("InspectionHospital");

                    b.Navigation("Operation");

                    b.Navigation("Organization");

                    b.Navigation("Reception");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionHospital", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("InspectionHospital")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("InspectionHospital")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Service", "Service")
                        .WithMany("InspectionHospital")
                        .HasForeignKey("IdService");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("InspectionHospital")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionPolyclinic", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("InspectionPolyclinic")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("InspectionPolyclinic")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Service", "Service")
                        .WithMany("InspectionPolyclinic")
                        .HasForeignKey("IdService");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("InspectionPoliclinic")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.MedicalCar", b =>
                {
                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("MedicalCar")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("MedicalCar")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Operation", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Operation")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("Operation")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Financing", "Financing")
                        .WithMany("Operation")
                        .HasForeignKey("IdFinancing");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("Operation")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Models.Service", "Service")
                        .WithMany("Operation")
                        .HasForeignKey("IdService");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Operation")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Financing");

                    b.Navigation("Organization");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Organization", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany()
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PatientCard.Models.Oxygen", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Oxygen")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Polyclinic", b =>
                {
                    b.HasOne("PatientCard.Models.Analyze", "Analyze")
                        .WithMany("Polyclinic")
                        .HasForeignKey("IdAnalyze");

                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Polyclinic")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Financing", "Financing")
                        .WithMany("Polyclinic")
                        .HasForeignKey("IdFinancing");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("Polyclinic")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Models.Stydy", "Stydy")
                        .WithMany("Polyclinics")
                        .HasForeignKey("IdStydy");

                    b.HasOne("PatientCard.Models.InspectionPolyclinic", "InspectionPolyclinic")
                        .WithMany("Polyclinics")
                        .HasForeignKey("InspectionPolyclinicIdInspectionPoliclinic");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Polyclinic")
                        .HasForeignKey("UserId");

                    b.Navigation("Analyze");

                    b.Navigation("Departament");

                    b.Navigation("Financing");

                    b.Navigation("InspectionPolyclinic");

                    b.Navigation("Organization");

                    b.Navigation("Stydy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Pressure", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Pressure")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Reception", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("Reception")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PatientCard.Models.Analyze", "Analyze")
                        .WithMany("Receptions")
                        .HasForeignKey("IdAnalyze");

                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Reception")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("Reception")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Service", "Service")
                        .WithMany("Reception")
                        .HasForeignKey("IdService");

                    b.HasOne("PatientCard.Models.Stydy", "Stydy")
                        .WithMany("Reception")
                        .HasForeignKey("IdStydy");

                    b.Navigation("Analyze");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Service");

                    b.Navigation("Stydy");
                });

            modelBuilder.Entity("PatientCard.Models.Recipe", b =>
                {
                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("Recipe")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.SignatureDoctor", "SignatureDoctor")
                        .WithMany()
                        .HasForeignKey("IdSignatureDoctor");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Recipe")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctor");

                    b.Navigation("SignatureDoctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.SignatureDoctor", b =>
                {
                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PatientCard.Models.Stydy", b =>
                {
                    b.HasOne("PatientCard.Models.Departament", "Departament")
                        .WithMany("Stydy")
                        .HasForeignKey("IdDepartament");

                    b.HasOne("PatientCard.Models.Doctor", "Doctor")
                        .WithMany("Stydy")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("PatientCard.Models.Organization", "Organization")
                        .WithMany("Stydy")
                        .HasForeignKey("IdOrganization");

                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Stydy")
                        .HasForeignKey("UserId");

                    b.Navigation("Departament");

                    b.Navigation("Doctor");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Models.Temperature", b =>
                {
                    b.HasOne("PatientCard.Areas.Identity.Data.ApplicationUser", "User")
                        .WithMany("Temperature")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PatientCard.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("Analyze");

                    b.Navigation("Anthropometry");

                    b.Navigation("DisabilitySheet");

                    b.Navigation("Glucose");

                    b.Navigation("Hospital");

                    b.Navigation("InspectionHospital");

                    b.Navigation("InspectionPoliclinic");

                    b.Navigation("MedicalCar");

                    b.Navigation("Operation");

                    b.Navigation("Oxygen");

                    b.Navigation("Polyclinic");

                    b.Navigation("Pressure");

                    b.Navigation("Reception");

                    b.Navigation("Recipe");

                    b.Navigation("Stydy");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("PatientCard.Models.Analyze", b =>
                {
                    b.Navigation("Polyclinic");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("PatientCard.Models.Departament", b =>
                {
                    b.Navigation("Analyze");

                    b.Navigation("DisabilitySheet");

                    b.Navigation("Hospital");

                    b.Navigation("InspectionHospital");

                    b.Navigation("InspectionPolyclinic");

                    b.Navigation("Operation");

                    b.Navigation("Polyclinic");

                    b.Navigation("Reception");

                    b.Navigation("Stydy");
                });

            modelBuilder.Entity("PatientCard.Models.Doctor", b =>
                {
                    b.Navigation("Analyzes");

                    b.Navigation("DisabilitySheet");

                    b.Navigation("InspectionHospital");

                    b.Navigation("InspectionPolyclinic");

                    b.Navigation("MedicalCar");

                    b.Navigation("Operation");

                    b.Navigation("Reception");

                    b.Navigation("Recipe");

                    b.Navigation("Stydy");
                });

            modelBuilder.Entity("PatientCard.Models.Financing", b =>
                {
                    b.Navigation("Operation");

                    b.Navigation("Polyclinic");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionHospital", b =>
                {
                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PatientCard.Models.InspectionPolyclinic", b =>
                {
                    b.Navigation("Polyclinics");
                });

            modelBuilder.Entity("PatientCard.Models.Operation", b =>
                {
                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PatientCard.Models.Organization", b =>
                {
                    b.Navigation("Analyzes");

                    b.Navigation("DisabilitySheet");

                    b.Navigation("Hospitals");

                    b.Navigation("Operation");

                    b.Navigation("Polyclinic");

                    b.Navigation("Stydy");
                });

            modelBuilder.Entity("PatientCard.Models.Reception", b =>
                {
                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("PatientCard.Models.Service", b =>
                {
                    b.Navigation("Analyzes");

                    b.Navigation("InspectionHospital");

                    b.Navigation("InspectionPolyclinic");

                    b.Navigation("Operation");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("PatientCard.Models.Stydy", b =>
                {
                    b.Navigation("Polyclinics");

                    b.Navigation("Reception");
                });
#pragma warning restore 612, 618
        }
    }
}
